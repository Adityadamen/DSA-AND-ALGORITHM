# by using mearge sort it will find those element which is satisfy the condition A[i]<A[j] in An given array


#include <stdio.h>
#include <stdlib.h>


 // } Driver Code Ends
//User function Template for C


// arr[]: Input Array
// N : Size of the Array arr[]
// Function to count inversions in the array.
 long long int merge1(long long a[],long long temp[],long long left,long long mid,long long right)
{
    long long i,j,k,inv=0;
    i=left;
    j=mid;
    k=left;
    while((i<=mid-1) && (j<=right))
    {
        if(a[i]<=a[j])
        {
            temp[k++]=a[i++];
        }
        else
        {
            temp[k++]=a[j++];
            inv = inv + (mid-i);
            
        }
    }
    while(i<=mid-1)
    {
        temp[k++]=a[i++];
    }
    while(j<=right)
    {
        temp[k++]=a[j++];
    }
    for(int m=left;m<=right;m++)
    {
        a[m]=temp[m];
    }
    return inv;
    
}
 long long int mergesort(long long a[],long long temp[],long long left,long long right)
{
    long long inv=0,mid=0;
    if(left<right)
    {
         mid =(left+right)/2;
        
        inv+= mergesort(a,temp,left,mid);
        inv+= mergesort(a,temp,mid+1,right);
        inv+= merge1(a,temp,left,mid+1,right);
    }
    return inv;
    
}
long long int inversionCount(long long a[], long long n)
{
    long long temp[n];
    mergesort(a,temp,0,n-1);
    
}



// { Driver Code Starts.

int main() {
    
    long long T;
    scanf("%ld", &T);
    
    while(T--){
        long long N;
        scanf("%ld", &N);
        
        long long A[N];
        for(long long i = 0;i<N;i++){
            scanf("%ld", &A[i]);
        }
        
        printf("%ld\n", inversionCount(A,N) );
    }
    
    return 0;
}
  // } Driver Code Ends

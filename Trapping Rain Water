Input:
N = 6
arr[] = {3,0,0,2,0,4}
Output:
10
Explanation: 


first solution-
time complexity 0(n)
space 0(n)

better solution
time complexity 0(n)
space 0(1)

first solution -

#include<bits/stdc++.h>

using namespace std;


 // } Driver Code Ends


class Solution{

    // Function to find the trapped water between the blocks.
    public:
    int trappingWater(int arr[], int n){
       int l[n],r[n];
       int ma,mi;
       ma=l[0]=arr[0];
       mi=r[n-1]=arr[n-1];
       for(int i=1;i<n;i++)
       {
           if(arr[i]>ma) ma=arr[i];
           l[i]=ma;
       }
       for(int i=n-2;i>=0;i--)
       {
           if(arr[i]>mi)mi=arr[i];
           r[i]=mi;
       }
       int s=0;
       for(int i=0;i<n;i++)
       {
           s +=min(l[i],r[i]) -arr[i];
       }
       return s;
    }
};

// { Driver Code Starts.

int main(){
    
    int t;
    //testcases
    cin >> t;
    
    while(t--){
        int n;
        
        //size of array
        cin >> n;
        
        int a[n];
        
        //adding elements to the array
        for(int i =0;i<n;i++){
            cin >> a[i];            
        }
        Solution obj;
        //calling trappingWater() function
        cout << obj.trappingWater(a, n) << endl;
        
    }
    
    return 0;
}  // } Driver Code Ends


Better solution-

approach - two pointer algorithms

class Solution{

    // Function to find the trapped water between the blocks.
    public:
    long long trappingWater(int arr[], int n){
        int lmax=INT_MIN;
        int rmax=INT_MIN;
        int i=0;
        int j=n-1;
        long long result=0;
        while(i<=j)
        {
            if(arr[i]<arr[j])
            {
                if(lmax<arr[i])
                lmax=arr[i];
                else
                result+=lmax-arr[i];
                i++;
            }
            else{
                if(rmax<arr[j])
                rmax=arr[j];
                else
                result+=rmax-arr[j];
                j--;
            }
        }
        return result;
    }
};

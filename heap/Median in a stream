Problem - 
Given an input stream of N integers. The task is to insert these numbers into a new stream and find the median of the stream formed by each insertion of X to the new stream.

Solution -
// { Driver Code Starts
#include <bits/stdc++.h>
using namespace std;



 // } Driver Code Ends
class Solution
{
    priority_queue<int>S;
    priority_queue<int,vector<int>,greater<int>>G;
    public:
    //Function to insert heap.
    void insertHeap(int &x)
    {
        if(S.empty())
        S.push(x);
        else if(S.size()>G.size())
        {
            if(x<S.top())
            {
                G.push(S.top());
                S.pop();
                S.push(x);
            }
            else{
                G.push(x);
            }
        }
        else{
            if(x<S.top())
            S.push(x);
            else{
                G.push(x);
                S.push(G.top());
                G.pop();
            }
        }
    }
    
    //Function to balance heaps.
    void balanceHeaps()
    {
        
    }
    
    //Function to return Median.
    double getMedian()
    {
        if(S.size()>G.size())
        return (double)S.top();
        else
        return (S.top()+G.top())/2;
        
    }
};


// { Driver Code Starts.

int main()
{
    int n, x;
    int t;
    cin>>t;
    while(t--)
    {
    	Solution ob;
    	cin >> n;
    	for(int i = 1;i<= n; ++i)
    	{
    		cin >> x;
    		ob.insertHeap(x);
    	    cout << floor(ob.getMedian()) << endl;
    	}
    }
	return 0;
}  // } Driver Code Ends
